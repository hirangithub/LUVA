
/*
Font Size mixin, produces rem and px units for font-size and line-height
e.g. @include font-size(1.4, 1.8);
compiles to
    font-size: 14px;
    line-height: 18px;
    font-size: 1.4rem;
    line-height: 1.8rem;
*/

@mixin font-size-rems($size:1.6, $line: $size * 1.5){
    font-size:   ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size:   $size + rem;
    line-height: $line + rem;
}

@mixin font-size($size:1.6, $line: $size * 1.5){
    font-size:   ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size:   $size + rem;
    line-height: $line + rem;
}
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

/*
Rem sizing mixin, produces rem and px units for any value
e.g. @include rems(margin, 1);
compiles to
    margin: 10px;
    margin: 1rem;

e.g. @include rems(margin, 2, 1);
compiles to
    margin: 20px 10px;
    margin: 2rem 1rem;

e.g. @includes rems(margin, 2, 1, 0);
compiles to
    margin: 20px 10px 0;
    margin: 2rem 1rem 0;

e.g. @includes rems(margin, 4, 3, 2, 1);
compiles to
    margin: 40px 30px 20px 10px;
    margin: 4rem 3rem 2rem 1rem;
*/

@mixin rems($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
      $value: strip-unit(nth($values, $i));
      $pxValues: #{$pxValues + $value*10}px;

      @if $i < $max {
        $pxValues: #{$pxValues + " "};
      }
  } 

  @for $i from 1 through $max {
      $value: strip-unit(nth($values, $i));
      $remValues: #{$remValues + $value}rem;

      @if $i < $max {
        $remValues: #{$remValues + " "};
      }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

/*
Opacity mixin including vendor specific prefixes for opacity values
e.g. @include opacity(0.8);
compiles to
    opacity: 0.8;
    filter: alpha(opacity=80);
*/

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}


/*
Mixin for clearing floated elements before closing the parent
*/

@mixin clearfix {
    *zoom: 1;
    &:before, &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/*
Mixin to includes vendor specific prefixes for
  box-sizing: border-box;
*/

@mixin box {
    -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
       -moz-box-sizing: border-box;    /* Firefox, other Gecko */
              box-sizing: border-box;         /* Opera/IE 8+ */	
}


/*
Mixin to includes vendor specific prefixes for border-radius
*/
@mixin border-radius($top-left:10px, $top-right:null, $bottom-right:null, $bottom-left:null){
    -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
       -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
        -ms-border-radius: $top-left $top-right $bottom-right $bottom-left;
            border-radius: $top-left $top-right $bottom-right $bottom-left;  
}

/*
Mixin to includes vendor specific prefixes for box-shadow
*/
@mixin box-shadow($horizontal: 0px, $vertical: 0px, $blur: 10px, $color: #444, $inset:"") {
    -webkit-box-shadow: $horizontal $vertical $blur $color #{$inset};
    -moz-box-shadow: $horizontal $vertical $blur $color #{$inset};
    box-shadow: $horizontal $vertical $blur $color #{$inset};
}